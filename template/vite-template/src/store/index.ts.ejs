<% if(ProjectStore==='pinia') {%>import { createPinia } from 'pinia';

import piniaPersist from 'pinia-plugin-persist';

const pinia = createPinia();
pinia.use(piniaPersist);

export default pinia;<% } %><%
if(ProjectStore==='vuex') {%>
import { HomeStateType } from '@/store/home/types';

import { createStore, createLogger, ModuleTree } from 'vuex';
import createPersistence from 'vuex-persistedstate';

import { storageHandler } from '@/utils/secure';

import packageJson from '../../package.json';

export interface RootState {
	home: HomeStateType;
}

// 加载所有模块
const loadModules = () => {
	const context = import.meta.globEager('./*/index.ts');

	const modules: Record<string, ModuleTree<RootState>> = {};

	Object.keys(context).forEach((key: string) => {
		const name = key.match(/^\.\/?([a-z_]+)\/index\.ts$/i)?.[1];
		name && (modules[name] = context[key].default);
	});
	return { context, modules };
};

const { context, modules } = loadModules();

const plugins = [
	createPersistence({
		key: packageJson.path,
		storage: storageHandler,
		paths: ['home'],
	}),
];

import.meta.env.DEV && plugins.push(createLogger());

const store = createStore<RootState>({
	strict: true,
	modules,
	plugins,
});

if (import.meta.hot) {
	// 在任何模块发生改变时进行热重载。
	import.meta.hot.accept(Object.keys(context), () => {
		const { modules } = loadModules();

		store.hotUpdate({
			modules,
		});
	});
}

export default store
<% } %>
